package scraper:types;

interface scraper {
    record manga-item {
        title: string,
        url: string,
        img-url: string,
    }

    record chapter {
        title: string,
        url: string,
        date: string,
        scanlation-group: option<string>,
    }

    record manga-page {
        title: string,
        url: string,
        img-url: string,
        alternative-names: list<string>,
        authors: list<string>,
        artists: option<list<string>>,
        status: string,
        manga-type: option<string>,
        release-date: option<string>,
        description: string,
        genres: list<string>,
        chapters: list<chapter>,
    }

    record genre {
        name: string,
        url: string,
    }

    record scraper-info {
        id: string,
        name: string,
        version: string,
        img-url: string,
        referer-url: option<string>,
        base-url: option<string>,
        legacy-urls: option<list<string>>,
    }

    scrape-chapter: func(url: string) -> list<string>;
    scrape-latest: func(page: u32) -> list<manga-item>;
    scrape-trending: func(page: u32) -> list<manga-item>;
    scrape-search: func(query: string, page: u32) -> list<manga-item>;
    scrape-manga: func(url: string) -> manga-page;
    scrape-genres-list: func() -> list<genre>;
    get-info: func() -> scraper-info;
}

interface http {
    record header {
        name: string,
        value: string,
    }

    record response {
        status: u16,
        headers: list<header>,
        body: string,
    }

    get: func(url: string, headers: option<list<header>>) -> option<response>;
    post: func(url: string, body: string, headers: option<list<header>>) -> option<response>;
    has-cloudflare-protection: func(text: string, status-code: option<u16>, headers: option<list<header>>) -> bool;
}

interface flare-solverr {
    use http.{response};

    create-session: func() -> result<string, string>;
    get: func(url: string, session-id: option<string>) -> option<response>;
}

interface headless {
    use html.{element};

    goto: func(url: string) -> result<_, string>;
    find-one: func(selector: string) -> option<element>;
    find-all: func(selector: string) -> list<element>;
    close: func() -> bool;
}

interface html {
    record element {
        html: string,
        selector: string,
    }

    find: func(html: string, selector: string) -> list<element>;
    find-one: func(html: string, selector: string) -> option<element>;
    text: func(elem: element) -> string;
    attr: func(elem: element, name: string) -> option<string>;
}

world root {
    export scraper;

    import http;
    import flare-solverr;
    import headless;
    import html;
}