name: Build & Upload Artifacts on Release

on:
  release:
    types: [published]

permissions:
  contents: write

jobs:
  build-and-upload-rust:
    name: Build & Upload Rust Binaries
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Rust + cache
        uses: dtolnay/rust-toolchain@stable
        id: setup_rust_release
        with:
          toolchain: stable

      - name: Cache Cargo registry & git index
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-${{ steps.setup_rust_release.outputs.cachekey }}"
          cache-on-failure: true
          shared-key: "rust-release-${{ runner.os }}"

      - name: Build Linux binary
        run: cargo build --release

      - name: Build Windows binary
        run: |
          rustup target add x86_64-pc-windows-gnu
          cargo build --release --target x86_64-pc-windows-gnu

      - name: Upload Linux binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/release/manga-vault
          asset_name: manga-vault-linux
          asset_content_type: application/octet-stream

      - name: Upload Windows binary
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: target/x86_64-pc-windows-gnu/release/manga-vault.exe
          asset_name: manga-vault-windows.exe
          asset_content_type: application/octet-stream

  build-and-upload-website:
    name: Build & Upload Website ZIP
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache NPM modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('apps/website/package-lock.json') }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "16"

      - name: Install dependencies & build
        run: |
          mv apps/website/.env.example apps/website/.env
          cd apps/website
          npm ci
          npm run build

      - name: Create website ZIP
        run: |
          mkdir -p website
          cp apps/website/package.json website/
          cp apps/website/package-lock.json website/
          cp -r apps/website/build website/
          zip -r website.zip website

      - name: Upload Website ZIP
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: website.zip
          asset_name: website.zip
          asset_content_type: application/zip
