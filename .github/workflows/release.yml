name: Weekly Auto Release

on:
  schedule:
    - cron: "0 0 * * 0" # weekly Sunday 00:00 UTC
  workflow_dispatch: {}

permissions:
  contents: write
  packages: write
  pull-requests: write

jobs:
  prepare:
    name: prepare (create tags/releases + manifest)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python deps
        run: python -m pip install --upgrade pip && pip install requests tomli

      - name: Create releases manifest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          chmod +x ./.github/scripts/prepare_releases.py || true
          python ./.github/scripts/prepare_releases.py

      - name: Upload manifest (for other jobs)
        uses: actions/upload-artifact@v4
        with:
          name: release-manifest
          path: release_manifest.json

  linux-build:
    name: linux (build binaries + website, upload to releases)
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry & git index
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-release"
          cache-on-failure: true
          shared-key: "rust-release-build-${{ runner.os }}"

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable pnpm via corepack
        run: corepack enable pnpm

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python deps
        run: python -m pip install --upgrade pip && pip install requests

      - name: Download manifest
        uses: actions/download-artifact@v4
        with:
          name: release-manifest
          path: .

      - name: Build & upload linux binaries + website
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          chmod +x ./.github/scripts/build_and_upload.py || true
          python ./.github/scripts/build_and_upload.py --platform linux

  linux-scrapers:
    name: linux-scrapers (build wasm scrapers + lua files)
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry & git index
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-release"
          cache-on-failure: true
          shared-key: "rust-release-build-scrapers-${{ runner.os }}"

      - name: Install cargo-binstall
        run: curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install cargo-component
        run: cargo binstall -y cargo-component

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python deps
        run: python -m pip install --upgrade pip && pip install requests

      - name: Download manifest
        uses: actions/download-artifact@v4
        with:
          name: release-manifest
          path: .

      - name: Build & upload scrapers
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          chmod +x ./.github/scripts/build_scrapers_upload.py || true
          python ./.github/scripts/build_scrapers_upload.py

  windows-build:
    name: windows (build windows binaries)
    runs-on: windows-2025
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust (Windows)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry & git index
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-release"
          cache-on-failure: true
          shared-key: "rust-release-build-${{ runner.os }}"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python deps
        run: python -m pip install --upgrade pip && pip install requests

      - name: Download manifest
        uses: actions/download-artifact@v4
        with:
          name: release-manifest
          path: .

      - name: Build & upload windows binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python ./.github/scripts/build_and_upload.py --platform windows

  macos-x86:
    name: macos-x86 (macos-13)
    runs-on: macos-13
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry & git index
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-release"
          cache-on-failure: true
          shared-key: "rust-release-build-${{ runner.os }}"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python deps
        run: python -m pip install --upgrade pip && pip install requests

      - name: Download manifest
        uses: actions/download-artifact@v4
        with:
          name: release-manifest
          path: .

      - name: Build & upload macos-x86 binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python ./.github/scripts/build_and_upload.py --platform macos-x86

  macos-arm:
    name: macos-arm (macos-15 - Apple Silicon)
    runs-on: macos-15
    needs: prepare
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry & git index
        uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "v0-rust-release"
          cache-on-failure: true
          shared-key: "rust-release-build-${{ runner.os }}"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python deps
        run: python -m pip install --upgrade pip && pip install requests

      - name: Download manifest
        uses: actions/download-artifact@v4
        with:
          name: release-manifest
          path: .

      - name: Build & upload macos-arm binaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          python ./.github/scripts/build_and_upload.py --platform macos-arm

  finalize:
    name: finalize (generate repo.json)
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    needs: [linux-build, linux-scrapers, windows-build, macos-x86, macos-arm]
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: true

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install Python deps
        run: python -m pip install --upgrade pip && pip install requests

      - name: Generate repo.json and commit if changed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          chmod +x ./.github/scripts/generate_repo_json.py || true
          python ./.github/scripts/generate_repo_json.py

      - name: Install dotslash
        run: curl -LSfs "https://github.com/facebook/dotslash/releases/latest/download/dotslash-ubuntu-22.04.$(uname -m).tar.gz" | tar fxz - -C /usr/local/bin dotslash

      - name: Run dprint
        run: |
          ./tools/dprint.dotslash fmt repo.json

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ci/update-repo-json
          commit-message: "ci: update repo.json with latest scraper release URLs"
          title: "ci: update repo.json"
          body: |
            Automated update of `repo.json` with the latest scraper releases.
          base: master
          delete-branch: true
          labels: automated, release
          draft: false
          add-paths: "repo.json"
