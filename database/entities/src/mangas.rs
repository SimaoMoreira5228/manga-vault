//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "mangas")]
pub struct Model {
	#[sea_orm(primary_key)]
	pub id: i32,
	pub title: String,
	pub url: String,
	pub img_url: String,
	pub scraper: String,
	pub updated_at: DateTime,
	pub alternative_names: Option<String>,
	pub authors: Option<String>,
	pub artists: Option<String>,
	pub status: Option<String>,
	pub manga_type: Option<String>,
	pub release_date: Option<DateTime>,
	#[sea_orm(column_type = "Text", nullable)]
	pub description: Option<String>,
	pub genres: Option<String>,
	pub created_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
	#[sea_orm(has_many = "super::chapters::Entity")]
	Chapters,
	#[sea_orm(has_many = "super::favorite_mangas::Entity")]
	FavoriteMangas,
	#[sea_orm(has_many = "super::manga_pack_members::Entity")]
	MangaPackMembers,
	#[sea_orm(has_many = "super::read_chapters::Entity")]
	ReadChapters,
}

impl Related<super::chapters::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::Chapters.def()
	}
}

impl Related<super::favorite_mangas::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::FavoriteMangas.def()
	}
}

impl Related<super::manga_pack_members::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::MangaPackMembers.def()
	}
}

impl Related<super::read_chapters::Entity> for Entity {
	fn to() -> RelationDef {
		Relation::ReadChapters.def()
	}
}

impl ActiveModelBehavior for ActiveModel {}
